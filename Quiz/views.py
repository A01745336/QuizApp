# Final Project: Quiz Application with Microservices
# Date: 30-May-2023
# Authors:
#           Diego Alejandro Balderas Tlahuitzo - A01745336
#           Gilberto André García Gaytán - A01753176
#           Paula Sophia Santoyo Arteaga - A01745312
#           Ricardo Ramírez Condado - A01379299
#           Paola Danae López Pérez- A01745689

# This code is importing various modules, forms, and models from the Django application. These
# modules, forms, and models are used to create a quiz application with microservices. The imported
# modules are used to render templates, redirect users, handle HTTP requests, authenticate users, and
# handle exceptions. The imported forms are used to create forms for user registration and login. The
# imported models are used to define the database schema for the quiz application.
from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponseRedirect
from django.contrib.auth import authenticate, login, logout
from django.http import Http404
from django.core.exceptions import ObjectDoesNotExist
from django.urls import reverse

from .forms import RegistroFormulario, UsuarioLoginFormulario
from .models import QuizUsuario, Pregunta, PreguntasRespondidas


def inicio(request):
    """
    This function returns a rendered HTML template with a context variable containing a welcome message.
    
    :param request: The request parameter is an object that represents the current HTTP request. It
    contains information about the request, such as the HTTP method used (GET, POST, etc.), the URL
    being requested, any data submitted with the request, and more. It is typically passed as the first
    parameter to a view function
    :return: The function `inicio` is returning an HTTP response generated by the `render` function. The
    response will render the `inicio.html` template with the `context` dictionary passed as a parameter.
    """
    context = {
        'bienvenido': 'Welcome'
    }
    return render(request, 'inicio.html', context)


def HomeUsuario(request):
    """
    This function returns a rendered HTML template for the home page of a user.
    
    :param request: The request parameter is an object that represents the HTTP request made by the
    user. It contains information about the request, such as the URL, headers, and any data submitted in
    the request. In this specific code snippet, the request parameter is used to render the 'home.html'
    template and return it
    :return: The function `HomeUsuario` is returning a rendered HTML template called `home.html` that
    will be displayed in the user's browser when they access the corresponding URL.
    """
    return render(request, 'Usuario/home.html')


def tablero(request):
    """
    This function retrieves the top 10 users with the highest total score in a quiz and passes them to a
    template for display.
    
    :param request: The request parameter is an HttpRequest object that represents the current request
    made by the user to the server. It contains information about the request, such as the HTTP method
    used, the URL requested, any data submitted in the request, and more. It is typically passed as the
    first parameter to a view function
    :return: a rendered HTML template called 'tablero.html' with a context dictionary containing the top
    10 users with the highest total score in a quiz and the count of those users.
    """
    total_usuarios_quiz = QuizUsuario.objects.order_by('-puntaje_total')[:10]
    contador = total_usuarios_quiz.count()

    context = {
        'usuario_quiz': total_usuarios_quiz,
        'contar_user': contador
    }

    return render(request, 'play/tablero.html', context)


def jugar(request):
    """
    This function handles the logic for playing a quiz game, including validating user responses and
    selecting new questions.
    
    :param request: The request object represents the current HTTP request that the user has made. It
    contains information about the user, the requested URL, any submitted data, and more
    :return: an HTTP response with a rendered HTML template 'play/jugar.html' and a context dictionary
    containing the current question and the number of remaining questions. The function handles user
    input via POST requests and updates the QuizUsuario object accordingly. If the user has answered all
    questions, the function redirects to the 'resultado' view.
    """

    quiz_user, created = QuizUsuario.objects.get_or_create(usuario=request.user)

    if request.method == 'POST':
        pregunta_pk = request.POST.get('pregunta_pk')
        pregunta_respondida = quiz_user.intentos.select_related('pregunta').get(pregunta__pk=pregunta_pk)
        respuesta_pk = request.POST.get('respuesta_pk')

        try:
            opcion_seleccionada = pregunta_respondida.pregunta.opciones.get(pk=respuesta_pk)
        except ObjectDoesNotExist:
            raise Http404

        quiz_user.validar_intento(pregunta_respondida, opcion_seleccionada)
        

        if quiz_user.intentos.count() < quiz_user.cantidad_preguntas:
            nuevas_preguntas = quiz_user.obtener_nuevas_preguntas(1)
            if nuevas_preguntas:
                quiz_user.crear_intentos(nuevas_preguntas[0])
                pregunta = nuevas_preguntas[0]
            else:
                pregunta = None
        else:
            pregunta = None

        
        if pregunta is None:
            quiz_user.cantidad_preguntas -= 1
            quiz_user.save()
            
            respuesta_correcta = pregunta_respondida.pregunta.opciones.get(correcta=True)
            return redirect('resultado', pregunta_respondida_pk=pregunta_respondida.pk)
        else:
            quiz_user.cantidad_preguntas -= 1
            quiz_user.save()
            return HttpResponseRedirect(reverse('jugar') + f'?cantidad_preguntas={quiz_user.cantidad_preguntas}')
    
    else:
        cantidad_preguntas = request.GET.get('cantidad_preguntas')
        if cantidad_preguntas:
            cantidad_preguntas = int(cantidad_preguntas)
            request.session['cantidad_preguntas'] = cantidad_preguntas  # Save to session
        else:
            cantidad_preguntas = request.session.get('cantidad_preguntas', 1)  # Get from session if already set

        quiz_user.cantidad_preguntas = cantidad_preguntas
        quiz_user.save()

        nuevas_preguntas = quiz_user.obtener_nuevas_preguntas(1)
        if nuevas_preguntas:
            quiz_user.crear_intentos(nuevas_preguntas[0])
            pregunta = nuevas_preguntas[0]
        else:
            pregunta = None

    context = {
        'pregunta': pregunta,
        'cantidad_preguntas': cantidad_preguntas
    }

    return render(request, 'play/jugar.html', context)



def resultado_pregunta(request, pregunta_respondida_pk):
    """
    This function retrieves a previously answered question and the number of questions in a quiz for a
    user and renders a template with the results.
    
    :param request: The request object represents the current HTTP request that the user has made to the
    server. It contains information about the user's request, such as the URL, headers, and any data
    that was submitted with the request
    :param pregunta_respondida_pk: pregunta_respondida_pk is a parameter that represents the primary key
    of a specific instance of the PreguntasRespondidas model. It is used to retrieve the corresponding
    object from the database using the get_object_or_404() function
    :return: a rendered HTML template with the context variables 'respondida' and 'cantidad_preguntas'.
    """
    respondida = get_object_or_404(PreguntasRespondidas, pk=pregunta_respondida_pk)
    quiz_user = QuizUsuario.objects.get(usuario=request.user)

    context = {
        'respondida': respondida,
        'cantidad_preguntas': quiz_user.cantidad_preguntas
    }
    return render(request, 'play/resultados.html', context)


def loginView(request):
    """
    This function handles the login view for a user, authenticates their credentials, and redirects them
    to the home page if successful.
    
    :param request: The request parameter is an HttpRequest object that represents the current request
    made by the user to the server. It contains information about the request, such as the HTTP method
    used, the headers, the user agent, and the request body. It is passed to the view function as the
    first argument
    :return: The function `loginView` returns an HTTP response that renders the 'Usuario/login.html'
    template with a context dictionary containing a form and a title. If the form is valid, the user is
    authenticated and redirected to the 'HomeUsuario' page.
    """
    titulo = 'login'
    form = UsuarioLoginFormulario(request.POST or None)
    if form.is_valid():
        username = form.cleaned_data.get("username")
        password = form.cleaned_data.get("password")
        usuario = authenticate(username=username, password=password)
        login(request, usuario)
        return redirect('HomeUsuario')

    context = {
        'form': form,
        'titulo': titulo
    }

    return render(request, 'Usuario/login.html', context)


def registro(request):
    """
    This function handles the registration process for a user and saves their information if the form is
    valid.
    
    :param request: The request parameter is an object that contains information about the current
    request made by the user, such as the HTTP method used (GET, POST, etc.), any data submitted in the
    request, and the user's session information. It is passed to the view function by Django's URL
    routing system
    :return: The function `registro` returns an HTTP response that renders the 'Usuario/registro.html'
    template with a context dictionary containing a `RegistroFormulario` instance and a string `titulo`.
    If the request method is POST and the form is valid, the function saves the form and redirects to
    the 'login' URL.
    """
    titulo = 'Crear una Cuenta'
    if request.method == 'POST':
        form = RegistroFormulario(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')
    else:
        form = RegistroFormulario()

    context = {
        'form': form,
        'titulo': titulo
    }

    return render(request, 'Usuario/registro.html', context)


def logout_vista(request):
    """
    This function logs out the user and redirects them to the homepage.
    
    :param request: The request parameter is an object that represents the current HTTP request. It
    contains information about the request, such as the URL, headers, and any data submitted in the
    request. In this specific code snippet, the request parameter is used to log out the current user
    and redirect them to the homepage
    :return: a redirect response to the root URL ('/').
    """
    logout(request)
    return redirect('/')
